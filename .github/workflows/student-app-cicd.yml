name: Build, Test, Security Check, and Push Docker Image to ECR, Deploy to ECS
on: workflow_dispatch
# on:
#   push:
#     branches:
#       - '*'
#     paths:
#       - 'node-app/**'
#     tags:
#       - 'release-*'    # Trigger on release tags (e.g., release-1.0.0)

env:
  REPO_NAME: temp-converter
  NODE_VERSION: '22'
  ECS_CLUSTER_NAME: student-temp-app
  ECS_SERVICE_NAME: temp-converter
  ECS_CONTAINER_NAME: temp-converter

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_ENV: ${{ steps.set-branch-env.outputs.deployment-env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variable
        run: |
            if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              echo "deployment-env=dev" >> $GITHUB_OUTPUT
            elif [[ "$GITHUB_REF" =~ ^refs/tags/release- ]]; then
              echo "deployment-env=prod" >> $GITHUB_OUTPUT
            elif [[ "$GITHUB_REF" =~ ^refs/tags/stage- ]]; then   # For staging environment, Not using this variable as of now
              echo "deployment-env=stage" >> $GITHUB_OUTPUT          
            else
              echo "deployment-env=dummy" >> $GITHUB_OUTPUT
            fi
        id: set-branch-env
        
  npm-tests:
    name: Run NPM Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  vulnerability-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fail build on High/Critical Vulnerabilities
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: "fs"
          format: table
          scan-ref: .
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0

  build-and-push:
    name: Build, Push and Deploy Docker Image
    env: 
      DEPLOYMENT_ENV: ${{ needs.set-env.outputs.DEPLOYMENT_ENV }}
    runs-on: ubuntu-latest
    needs: 
      - npm-tests
      - vulnerability-scan
      - set-env
    defaults:
      run:
        working-directory: ./node-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Image tag
        id: get-tag
        run: |
          if [[ ${{ github.ref_name }} =~ ^(release-.*)$ ]]; then
            TAG=${{ github.ref_name }}  # Use tag for release branches
          else
            TAG=$(git rev-parse --short ${{ github.sha }})  # Default to short SHA for non-release branches
          fi
          
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

          docker build --platform linux/amd64 -t $IMAGE_URI .

          docker tag $IMAGE_URI ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:latest

      - name: Run Trivy vulnerability scanner
        id: docker-scan
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to ECR
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}
          docker push $IMAGE_URI

          # Push the latest tag only if on the 'main' branch
          if [[ ${{ github.ref_name }} == 'main' ]]; then
            docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }}:latest
          fi
          echo "IMAGE_URI_PUSHED=$IMAGE_URI" >> $GITHUB_ENV
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/release')) && success() && steps.docker-scan.outcome == 'success'


      - name: Download task definition 
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/release')) && success()
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE_NAME }} --query taskDefinition > task-definition.json

      - name: Fill in new image ID in task definition
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/release')) && success()
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: node-app/task-definition.json 
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI_PUSHED }}

      - name: Deploy Amazon ECS task definition
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/release')) && success()
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}-${{ env.DEPLOYMENT_ENV }}
