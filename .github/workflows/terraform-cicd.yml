name: Terraform CICD
#on: workflow_dispatch
on:
 push:
   branches:
     - main
     - stage
     - prod
   paths:
     - terraform/**
 pull_request:
   branches:
     - main
     - stage
     - prod
   paths:
     - 'terraform/**'

permissions:
  contents: read
  pull-requests: write  # Grant write permission to post comments on PRs.    

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_ENV: ${{ steps.set-branch-env.outputs.deployment-env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variable
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            if [ "$GITHUB_BASE_REF" == "main" ]; then
              echo "deployment-env=dev" >> $GITHUB_OUTPUT
            elif [[ "$GITHUB_BASE_REF" == "stage" ]]; then
              echo "deployment-env=stage" >> $GITHUB_OUTPUT
            elif [[ "$GITHUB_BASE_REF" == "prod" ]]; then
              echo "deployment-env=prod" >> $GITHUB_OUTPUT
            else
              echo "deployment-env=dummy" >> $GITHUB_OUTPUT
            fi
          elif [ "$GITHUB_EVENT_NAME" == "push" ]; then
            if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              echo "deployment-env=dev" >> $GITHUB_OUTPUT
            elif [[ "$GITHUB_REF" == "refs/heads/stage" ]]; then
              echo "deployment-env=stage" >> $GITHUB_OUTPUT
            elif [[ "$GITHUB_REF" == "refs/heads/prod" ]]; then
              echo "deployment-env=prod" >> $GITHUB_OUTPUT            
            else
              echo "deployment-env=dummy" >> $GITHUB_OUTPUT
            fi
          fi
        id: set-branch-env

  tfsec-scan:
    name: TFsec Scan
    runs-on: ubuntu-latest
    needs: set-env
    env: 
      DEPLOYMENT_ENV: ${{ needs.set-env.outputs.DEPLOYMENT_ENV }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy Environment specific files
        run: |
          echo "Copying Environment specific files"
          cp -r environments/${{ env.DEPLOYMENT_ENV }}/* .
        
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Run TFsec Security Scan
        id: tfsec-scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true
          additional_args: '--format json --out tfsec-results.json'

  terraform-plan-apply:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    env: 
      DEPLOYMENT_ENV: ${{ needs.set-env.outputs.DEPLOYMENT_ENV }}
    defaults:
      run:
        working-directory: ./terraform    
    needs: 
      - tfsec-scan
      - set-env

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy Environment specific files
        run: |
          echo "Copying Environment specific files"
          cp -r environments/${{ env.DEPLOYMENT_ENV }}/* .    

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate        
  
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            const marker = "#### Terraform Format and Style";
            const issue_number = context.payload.pull_request.number;


            // Identify an existing comment with a specific marker
            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
            });     
            
            const existingComment = existingComments.data.find(comment => comment.body.startsWith(marker));
       

            if (existingComment) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: output,
              });
            } else {
              // Create a new comment if no existing one is found
              await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  });
                }
  
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
      - name: Terraform Apply
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/stage') && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
